#!/usr/bin/env python3
"""
Brevo Setup Helper Script
Interactive script to help configure Brevo email service
"""

import os
import re

def create_env_file():
    """Create or update .env file with Brevo configuration"""
    
    print("üîß Brevo Email Service Setup")
    print("=" * 40)
    print("This script will help you configure Brevo for your placement cell app.\n")
    
    # Check if .env exists
    env_exists = os.path.exists('.env')
    if env_exists:
        print("üìÑ Found existing .env file")
        update = input("Do you want to update email configuration? (y/n): ").lower().strip()
        if update != 'y':
            print("‚ùå Setup cancelled")
            return
    
    # Get Brevo API key
    print("\nüîë Step 1: Brevo API Key")
    print("Get your API key from: https://app.brevo.com/settings/keys/api")
    api_key = input("Enter your Brevo API key: ").strip()
    
    if not api_key:
        print("‚ùå API key is required")
        return
    
    # Get sender email
    print("\nüìß Step 2: Sender Email")
    print("This should be a professional email address (preferably your domain)")
    sender_email = input("Enter sender email (e.g., placement@yourdomain.com): ").strip()
    
    if not sender_email or '@' not in sender_email:
        print("‚ùå Valid email address is required")
        return
    
    # Get sender name
    print("\nüë§ Step 3: Sender Name")
    sender_name = input("Enter sender name (e.g., IGNTU Placement Cell): ").strip()
    
    if not sender_name:
        sender_name = "IGNTU Placement Cell"
    
    # Optional SMTP configuration
    print("\nüìÆ Step 4: SMTP Fallback (Optional)")
    print("Configure SMTP as backup method")
    setup_smtp = input("Do you want to configure SMTP fallback? (y/n): ").lower().strip()
    
    smtp_username = ""
    smtp_password = ""
    
    if setup_smtp == 'y':
        smtp_username = input("Enter Brevo login email: ").strip()
        smtp_password = input("Enter Brevo SMTP password: ").strip()
    
    # Create .env content
    env_content = f"""# IGNTU Placement Cell - Environment Variables
# Generated by setup_brevo.py

# Security - Generate a random secret key
SECRET_KEY=your-secret-key-here

# MongoDB Database - Get from MongoDB Atlas
MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/database?retryWrites=true&w=majority

# Email Configuration - Brevo
EMAIL_PROVIDER=brevo
BREVO_API_KEY={api_key}
SENDER_EMAIL={sender_email}
SENDER_NAME={sender_name}

# SMTP Fallback Configuration (Optional)
SMTP_SERVER=smtp-relay.brevo.com
SMTP_PORT=587
SMTP_USERNAME={smtp_username}
SMTP_PASSWORD={smtp_password}

# Flask Configuration
FLASK_ENV=production
PORT=5000
"""
    
    # Write .env file
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("\n‚úÖ Configuration saved to .env file!")
        print("\nüìã Next Steps:")
        print("1. Update SECRET_KEY and MONGODB_URI in .env file")
        print("2. Verify your sender email in Brevo dashboard")
        print("3. Run: python test_brevo.py")
        print("4. Start your application")
        
        print("\nüîí Security Note:")
        print("Never commit your .env file to version control!")
        
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")

def validate_api_key(api_key):
    """Basic validation of API key format"""
    # Brevo API keys are typically long alphanumeric strings
    if len(api_key) < 20:
        return False
    if not re.match(r'^[a-zA-Z0-9\-_]+$', api_key):
        return False
    return True

if __name__ == "__main__":
    try:
        create_env_file()
    except KeyboardInterrupt:
        print("\n‚ùå Setup cancelled by user")
    except Exception as e:
        print(f"\n‚ùå Setup failed: {e}")
        print("Please check BREVO_SETUP_GUIDE.md for manual setup instructions")